package com.niyue.coding.leetcode.sudokusolver;

import static org.hamcrest.core.Is.is;
import static org.junit.Assert.assertThat;

import org.junit.Test;
public class SudokuSolverTest {

	@Test
	// affected cells computation is incorrect
	public void testOne() {
		char[][] board = new char[][] {
			{'.', '.', '9', '7', '4', '8', '.', '.', '.'},
			{'7', '.', '.', '.', '.', '.', '.', '.', '.'},
			{'.', '2', '.', '1', '.', '9', '.', '.', '.'},
			{'.', '.', '7', '.', '.', '.', '2', '4', '.'},
			{'.', '6', '4', '.', '1', '.', '5', '9', '.'},
			{'.', '9', '8', '.', '.', '.', '3', '.', '.'},
			{'.', '.', '.', '8', '.', '3', '.', '2', '.'},
			{'.', '.', '.', '.', '.', '.', '.', '.', '6'},
			{'.', '.', '.', '2', '7', '5', '9', '.', '.'},
		};
		Solution sl = new Solution();
		sl.solveSudoku(board);
		char[][] result = new char[][] {
			{'5', '1', '9', '7', '4', '8', '6', '3', '2'},
			{'7', '8', '3', '6', '5', '2', '4', '1', '9'},
			{'4', '2', '6', '1', '3', '9', '8', '7', '5'},
			{'3', '5', '7', '9', '8', '6', '2', '4', '1'},
			{'2', '6', '4', '3', '1', '7', '5', '9', '8'},
			{'1', '9', '8', '5', '2', '4', '3', '6', '7'},
			{'9', '7', '5', '8', '6', '3', '1', '2', '4'},
			{'8', '3', '2', '4', '9', '1', '7', '5', '6'},
			{'6', '4', '1', '2', '7', '5', '9', '8', '3'},
		};
				
		assertThat(board, is(result));
	}
	
	@Test
	// affected cells computation is incorrect
	public void testTwo() {
		char[][] board = new char[][] {
			{'.', '.', '.', '2', '.', '.', '.', '6', '3'},
			{'3', '.', '.', '.', '.', '5', '4', '.', '1'},
			{'.', '.', '1', '.', '.', '3', '9', '8', '.'},
			{'.', '.', '.', '.', '.', '.', '.', '9', '.'},
			{'.', '.', '.', '5', '3', '8', '.', '.', '.'},
			{'.', '3', '.', '.', '.', '.', '.', '.', '.'},
			{'.', '2', '6', '3', '.', '.', '5', '.', '.'},
			{'5', '.', '3', '7', '.', '.', '.', '.', '8'},
			{'4', '7', '.', '.', '.', '1', '.', '.', '.'},
		};
		Solution sl = new Solution();
		sl.solveSudoku(board);
		char[][] result = new char[][] {
			{'8', '5', '4', '2', '1', '9', '7', '6', '3'},
			{'3', '9', '7', '8', '6', '5', '4', '2', '1'},
			{'2', '6', '1', '4', '7', '3', '9', '8', '5'},
			{'7', '8', '5', '1', '2', '6', '3', '9', '4'},
			{'6', '4', '9', '5', '3', '8', '1', '7', '2'},
			{'1', '3', '2', '9', '4', '7', '8', '5', '6'},
			{'9', '2', '6', '3', '8', '4', '5', '1', '7'},
			{'5', '1', '3', '7', '9', '2', '6', '4', '8'},
			{'4', '7', '8', '6', '5', '1', '2', '3', '9'},
		};
				
		assertThat(board, is(result));
	}
}
